{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Hikvision/PRAMA Camera Sync","text":""},{"location":"#download-and-sync-recordings-stored-in-local-sd-card-of-a-hikvisionprama-ip-camera-with-a-linux-machine","title":"Download and sync recordings stored in Local SD card of a Hikvision/Prama IP camera with a linux machine","text":"<p>Only linux machine and Hikvision/PRAMA camera discussed in this repository, run this on a linux machine(script may run on any unix-like system but automation only available on linux kernel)</p> <p>Clone this repository to perform the steps given below</p> <pre><code>git clone git@github.com:vikycoder/HikvisionRecordSync.git\n</code></pre> <p>You may rename folder <code>HikvisionRecordSync</code> to your <code>&lt;camera-name&gt;</code> accordingly, recording for that camera will be stored there.(scripts and recordings will be in the same folder)</p>"},{"location":"#steps-to-be-followed","title":"Steps to be followed","text":""},{"location":"#step-1-complete-initial-setup","title":"Step 1: Complete Initial Setup","text":"<ul> <li>Initialize and check camera using steps in Initial Setup before proceeding further, ignore it if already done. <p>Before proceeding kindly note down IP-address, credentials, QUOTA(decide it for each camera according to your need).</p> </li> </ul>"},{"location":"#step-2-enter-cloned-repo-directory-for-camera","title":"Step 2: Enter cloned repo directory for camera","text":"<ul> <li>cd into the folder where you set up for your camera(clone this repository again, rename it accordingly and follow from Step 1 for setting up another camera)</li> </ul> <pre><code>cd &lt;folder-which-you-cloned&gt;\n</code></pre>"},{"location":"#step-3-test","title":"Step 3: Test","text":"<ul> <li>Now lets test the script on your camera First make them executable</li> </ul> <pre><code>chmod +x clear_recordings.sh\nchmod +x camsync.sh\nchmod +x LIFO.sh\n</code></pre> <pre><code>./camsync.sh &lt;ip-address&gt; &lt;username&gt;:&lt;password&gt; &lt;QUOTA&gt; &lt;location&gt;/&lt;camera-name&gt;\n</code></pre> <p>Replace</p> <ul> <li><code>&lt;ip-address&gt;</code> with IP-address of camera</li> <li><code>&lt;username&gt;</code> and <code>&lt;password&gt;</code> with username and password respectively for that camera</li> <li><code>&lt;QUOTA&gt;</code> with quota decided for that camera in MB</li> <li><code>&lt;location&gt;</code> and <code>&lt;camera-name&gt;</code> with folder which was git cloned and renamed to <code>&lt;camera-name&gt;</code> in initial setup</li> </ul> <p>Below given is a successfull execution of the script </p> <p>For clearing all recordings and synced lists</p> <pre><code>./clear_recordings.sh\n</code></pre>"},{"location":"#step-4-for-setting-up-systemd-for-automationsupported-only-on-linux-kernels","title":"Step 4: For setting up systemd for automation(supported only on linux kernels)","text":"<ul> <li>Go to /etc/systemd/system/</li> </ul> <pre><code>cd /etc/systemd/system/\n</code></pre> <ul> <li>Now create a new timer for automatic service(just a timer for syncing)</li> </ul> <pre><code>sudo nano &lt;camera-name&gt;.timer\n</code></pre> <ul> <li>Paste following code into here</li> </ul> <pre><code>[Unit]\nDescription=&lt;camera-name&gt;\n\n[Timer]\nOnUnitActiveSec=1800s\nOnBootSec=60s\n\n[Install]\nWantedBy=timers.target\n</code></pre> <p>You may set <code>OnBootSec</code> and <code>OnUnitActiveSec</code> according to your need  <code>OnBootSec</code> makes service start after its boot <code>OnUnitActiveSec</code> defined sync period(1800s means syncs every 30mins after boot) Save it</p> <ul> <li>Now create a new service for automatic service(to trigger sync at time intervals according to <code>camsync.timer</code>)</li> </ul> <pre><code>sudo nano &lt;camera-name&gt;.service\n</code></pre> <ul> <li>Paste following code into here</li> </ul> <pre><code>[Unit]\nAfter=network.target\n\n[Service]\nExecStart=&lt;path/to/camera/folder&gt;/camsync.sh &lt;ip-address&gt; &lt;username&gt;:&lt;password&gt; &lt;QUOTA&gt; &lt;location&gt;/&lt;camera-name&gt;\n\n[Install]\nWantedBy=default.target\n</code></pre> <p>Replace as before</p> <ul> <li><code>&lt;ip-address&gt;</code> with IP-address of camera</li> <li><code>&lt;username&gt;</code> and <code>&lt;password&gt;</code> with username and password respectively for that camera</li> <li><code>&lt;QUOTA&gt;</code> with quota decided for that camera in MB</li> <li> <p><code>&lt;location&gt;</code> and <code>&lt;camera-name&gt;</code> with folder which was git cloned and renamed to <code>&lt;camera-name&gt;</code> in initial setup</p> </li> <li> <p>Set all permissions as given below</p> </li> </ul> <pre><code>sudo chmod 744 &lt;location&gt;/&lt;camera-name&gt;/camsync.sh\nsudo chmod 664 /etc/systemd/system/camsync.service\nsudo chmod 664 /etc/systemd/system/camsync.timer\n</code></pre> <ul> <li>Now enable timer,service ,and restart systemd</li> </ul> <pre><code>sudo systemctl enable camsync.timer\nsudo systemctl enable camsync.service\nsudo systemctl daemon-reload\n</code></pre> <p>Use <code>sudo systemctl list-timers --all</code> to view all timers,check if camsync.timer active and running Now use <code>sudo systemctl status camsync.service</code> for viewing status of sync</p>"},{"location":"IPCamConfig/","title":"Setting IP cameras","text":"<p>Do it for each camera Don't Forget to save after each step!!!</p>"},{"location":"IPCamConfig/#step-1-set-time","title":"Step 1: Set Time","text":"<ul> <li>Get into camera ip config, system&lt;system settings&lt;time settings</li> <li>Set time and NTP server(first sync with PC then test NTP)</li> </ul>"},{"location":"IPCamConfig/#step-2-set-video-streams","title":"Step 2: Set video streams","text":"<ul> <li>Go to Video/Audio tab&lt;Video</li> <li>Now set main stream(normal) for 1920x1080 and 25fps h264 then save</li> <li>Now set substream 640x480 25fps MJPEG instead of h264</li> <li>SAVE!!!</li> </ul>"},{"location":"IPCamConfig/#step-3-test-those-streams","title":"Step 3: Test those streams","text":"<ul> <li>Check mjpeg using</li> </ul> <pre><code>http://&lt;username:password&gt;@&lt;ip-address&gt;/ISAPI/Streaming/channels/102/httppreview\n</code></pre> <ul> <li>Check rtsp stream using</li> </ul> <pre><code>mpv rtsp://&lt;username:password&gt;@&lt;ip-address&gt;\n</code></pre>"},{"location":"IPCamConfig/#step-4-format-sd-card-and-setup-recording","title":"Step 4: Format SD card and setup recording","text":"<ul> <li>Go to storage tab&lt;storage management</li> <li>Set Percentage of Record to 100</li> <li>Tick the local SD card, select format and wait until it formats</li> <li>SAVE!!!</li> </ul>"},{"location":"IPCamConfig/#step-5-setup-storage","title":"Step 5: Setup storage","text":"<ul> <li>Go to Schedule Settings in Storage tab</li> <li>Tick enable</li> <li>drag monday until fully selected, copy that to all</li> <li>Select Advanced options</li> <li>Choose Stream Type as Main Stream(Normal), recording expiration to 2days(32GB SDcard) then click OK</li> <li>SAVE!!!</li> </ul>"},{"location":"IPCamConfig/#step-6-fetch-recorded-list","title":"Step 6: Fetch recorded list","text":"<p>Enter below lines to terminal for checking whether camera recording or not</p> <pre><code>curl -u &lt;username:password&gt; --digest \"http://&lt;ip-address&gt;/ISAPI/ContentMgmt/search\" -H \"Content-Type: application/xml\" -X GET -d '&lt;?xml version: \"1.0\" encoding=\"utf-8\"?&gt;\n&lt;CMSearchDescription&gt; &lt;searchID&gt;C92DC285-8F30-0001-40C6-F0EFA8FB18B5&lt;/searchID&gt;&lt;timeSpanList&gt;\n&lt;timeSpan&gt; &lt;startTime&gt;2020-04-07T00:00:00Z&lt;/startTime&gt; &lt;endTime&gt;2036-04-07T23:59:59Z&lt;/endTime&gt; &lt;/timeSpan&gt;\n&lt;/timeSpanList&gt; &lt;maxResults&gt;100&lt;/maxResults&gt; &lt;searchResultPostion&gt;0&lt;/searchResultPostion&gt; &lt;metadataList&gt;\n&lt;metadataDescriptor&gt;//recordType.meta.std-cgi.com&lt;/metadataDescriptor&gt; &lt;/metadataList&gt;\n&lt;/CMSearchDescription&gt;' -v -o response.txt\n</code></pre> <p>cat response.txt to check if recording or not  </p>"},{"location":"script_used/","title":"Basic Explanation","text":"<p>This repository contains the following items</p> <pre><code>.\n\u251c\u2500\u2500 IPCamConfig.md       //Instructions for Initial Camera setup\n\u251c\u2500\u2500 LIFO.sh              //For performing LIFO\n\u251c\u2500\u2500 README.md            //Setup guide(for noobs)\n\u251c\u2500\u2500 camsync.sh           //main script\n\u251c\u2500\u2500 clear_recordings.sh  //For clearing all recordings and rtsp links\n\u251c\u2500\u2500 logs                 //See that for troubleshooting\n\u251c\u2500\u2500 synced.txt           //Recordings that are already synced\n\u2514\u2500\u2500 syncedrtsp.txt       //rtsp links of recordings that are already synced\n\n</code></pre>"},{"location":"script_used/#camsyncsh","title":"camsync.sh","text":"<p>Here camsync.sh is the main script used for execution, it is parameterized with parameters</p> <ul> <li> <p>$1: IP-address</p> </li> <li> <p>$2: credentials</p> </li> <li> <p>$3: quota</p> </li> <li> <p>$4: location</p> </li> </ul> <pre><code>./camsync &lt;ip-address&gt; &lt;user:password&gt; &lt;quota&gt; &lt;location&gt;\n</code></pre> <p>This script does the following</p> <ol> <li>Checks if camera of  is on the local network <li>If camera active, it creates a file <code>search_result.xml</code> with all recordings</li> <li>Stores all rtsp links(its a unique identifier,not for streaming purpose) from <code>search_result.xml</code> of recordings to <code>rtsplist.txt</code></li> <li>Takes first line from <code>rtsplist.txt</code> and compares with <code>syncedrtsp.txt</code> if its there, if not script proceeds to download that recording, else it skips that rtsp link and goes to next rtsp link in <code>rtsplist.txt</code></li> <li>Checks and performsvLIFO(Last In First Out) if needed with <code>LIFO.sh</code>(see below for its working)</li> <li>Returns to step 4 for next line in  <code>rtsplist.txt</code> ,script ends if <code>rtsplist.txt</code> fully covered</li>"},{"location":"script_used/#lifosh","title":"LIFO.sh","text":"<p>Used for LIFO(Last In First Out) It is parameterised with parameters</p> <ul> <li> <p>$1: QUOTA (in MB)</p> </li> <li> <p>$2: location</p> </li> </ul> <pre><code>./LIFO.sh &lt;QUOTA&gt; &lt;location&gt;\n</code></pre> <p>This script does the following</p> <ol> <li>Takes size of directory where camera is set up($2:location)</li> <li>Compares it with QUOTA($1:QUOTA) and decides whether LIFO needed</li> <li>If LIFO not needed then script exits, else it reads <code>synced.txt</code> line by line and deletes the recording </li> <li>Step 2. repeats</li> </ol> <p>LIFO is needed for proper storage management in HDD/storage  User must make all calculations before deciding QUOTA</p>"},{"location":"visual_diagrams/","title":"Visual Explanation","text":""},{"location":"visual_diagrams/#working-block-diagram","title":"Working block diagram","text":"<pre>\n    flowchart TD\n    A[camsync.sh] --&gt;|$1-IP, $2-credentials| B{Checks if active}\n    B --&gt; |active| C[Get list of recordings to `search_result.xml`]\n    B --&gt; |not active| L[End]\n    C --&gt;|From `search_result.xml`| D[Gets all rtsp links to rtsplinks.txt]\n    D --&gt; |From `rtsplinks.txt`| E{Checks line by line if rtsp link present in syncedrtsp.txt}\n    E --&gt; |if found, check next line| E\n    E --&gt; |if not found| F[Download using that rtsp link]\n    F --&gt; |after downloading as .mp4| G[store this rtsp link to syncedrtsp.txt and timestamp to synced.txt]\n    G --&gt;|$3-QUOTA,running LIFO.sh| H{Checking if camera directory size greater than QUOTA}\n    H --&gt;|if size &lt; QUOTA| E\n    H --&gt;|if size &gt;= QUOTA| I[Read synced.txt line by line, delete .mp4]\n    I --&gt;|Run LIFO.sh again| G\n    E --&gt;|if all lines are read| L\n    L --&gt;|executes again according to camsync.timer if systemd used| A"},{"location":"ml/","title":"\u0d39\u0d4b\u0d02 \u0d2a\u0d47\u0d1c\u0d4d","text":""}]}